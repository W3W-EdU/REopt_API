# Generated by Django 4.0.7 on 2023-03-08 19:18

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('job', '0024_alter_electrictariffinputs_blended_annual_demand_rate'),
    ]

    operations = [
        migrations.AlterField(
            model_name='chpinputs',
            name='federal_itc_fraction',
            field=models.FloatField(blank=True, default=0.3, help_text='Percentage of capital costs that are credited towards federal taxes', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='chpinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, default=0.8, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='coldthermalstorageinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, default=0.8, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='coldthermalstorageinputs',
            name='macrs_option_years',
            field=models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], default=7, help_text='Duration over which accelerated depreciation will occur. Set to zero to disable'),
        ),
        migrations.AlterField(
            model_name='coldthermalstorageinputs',
            name='total_itc_fraction',
            field=models.FloatField(blank=True, default=0.3, help_text='Total investment tax credit in percent applied toward capital costs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='electricstorageinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, default=0.8, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='electricstorageinputs',
            name='total_itc_fraction',
            field=models.FloatField(blank=True, default=0.3, help_text='Total investment tax credit in percent applied toward capital costs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='electrictariffinputs',
            name='export_rate_beyond_net_metering_limit',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0)]), blank=True, default=list, help_text='Price of electricity sold back to the grid beyond total annual grid purchases, regardless of net metering. Can be a scalar value, which applies for all-time, or an array with time-sensitive values. If an array is input then it must have a length of 8760, 17520, or 35040. The inputed array values are up/down-sampled using mean values to match the Scenario time_steps_per_hour.', size=None),
        ),
        migrations.AlterField(
            model_name='generatorinputs',
            name='can_export_beyond_nem_limit',
            field=models.BooleanField(blank=True, default=False, help_text='True/False for if technology can export energy beyond the annual grid purchases (and be compensated for that energy at the export_rate_beyond_net_metering_limit).'),
        ),
        migrations.AlterField(
            model_name='hotthermalstorageinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, default=0.8, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='hotthermalstorageinputs',
            name='macrs_option_years',
            field=models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], default=7, help_text='Duration over which accelerated depreciation will occur. Set to zero to disable'),
        ),
        migrations.AlterField(
            model_name='hotthermalstorageinputs',
            name='total_itc_fraction',
            field=models.FloatField(blank=True, default=0.3, help_text='Total investment tax credit in percent applied toward capital costs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='pvinputs',
            name='can_export_beyond_nem_limit',
            field=models.BooleanField(blank=True, default=True, help_text='True/False for if technology can export energy beyond the annual grid purchases (and be compensated for that energy at the export_rate_beyond_net_metering_limit).Note that if off-grid is true, can_export_beyond_nem_limit is always set to False.'),
        ),
        migrations.AlterField(
            model_name='pvinputs',
            name='federal_itc_fraction',
            field=models.FloatField(blank=True, default=0.3, help_text='Percentage of capital costs that are credited towards federal taxes', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='pvinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, default=0.8, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='windinputs',
            name='can_export_beyond_nem_limit',
            field=models.BooleanField(blank=True, default=True, help_text='True/False for if technology can export energy beyond the annual grid purchases (and be compensated for that energy at the export_rate_beyond_net_metering_limit).Note that if off-grid is true, can_export_beyond_nem_limit is always set to False.'),
        ),
        migrations.AlterField(
            model_name='windinputs',
            name='federal_itc_fraction',
            field=models.FloatField(blank=True, default=0.3, help_text='Percentage of capital costs that are credited towards federal taxes', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='windinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, default=0.8, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
    ]
